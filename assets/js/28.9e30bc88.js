(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{933:function(t,s,a){"use strict";a.r(s);var e=a(56),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"应用容器部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用容器部署"}},[t._v("#")]),t._v(" 应用容器部署")]),t._v(" "),a("h2",{attrs:{id:"基本介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍"}},[t._v("#")]),t._v(" 基本介绍")]),t._v(" "),a("ul",[a("li",[t._v("虚拟机问题")])]),t._v(" "),a("p",[t._v("虚拟机是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在"),a("code",[t._v("Windows")]),t._v("系统里面运行"),a("code",[t._v("Linux")]),t._v("系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。")]),t._v(" "),a("p",[t._v("虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。")]),t._v(" "),a("p",[t._v("（1）资源占用多")]),t._v(" "),a("p",[t._v("虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。")]),t._v(" "),a("p",[t._v("（2）冗余步骤多")]),t._v(" "),a("p",[t._v("虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。")]),t._v(" "),a("p",[t._v("（3）启动慢")]),t._v(" "),a("p",[t._v("启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。")]),t._v(" "),a("ul",[a("li",[t._v("什么是应用容器")])]),t._v(" "),a("p",[t._v("我们可以把它看成虚拟机，能在一台服务器上隔离出若干个互不干扰的环境。把自己的应用放入容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。它具有启动快、资源占用少、体积小、易操作等等。相比虚拟机有很多优势。")]),t._v(" "),a("ul",[a("li",[t._v("为什么要使用应用容器")])]),t._v(" "),a("p",[t._v("因为软件更新发布及部署低效，过程繁琐且需要人工介入。环境一致性难以保证，不同环境之间迁移成本太高。有了应用容器部署可以很大程度解决上面的问题。")]),t._v(" "),a("ul",[a("li",[t._v("Docker 应用容器部署")])]),t._v(" "),a("p",[a("code",[t._v("Docker")]),t._v("是一个开源的应用容器引擎，目前有三大类。")]),t._v(" "),a("p",[t._v("（1）提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。")]),t._v(" "),a("p",[t._v("（2）提供弹性的云服务。因为"),a("code",[t._v("Docker")]),t._v("容器可以随开随关，很适合动态扩容和缩容。")]),t._v(" "),a("p",[t._v("（3）组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。")]),t._v(" "),a("h2",{attrs:{id:"下载方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下载方式"}},[t._v("#")]),t._v(" 下载方式")]),t._v(" "),a("p",[a("code",[t._v("Docker")]),t._v("是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。企业版包含了一些收费服务，个人开发者一般用不到。下面的介绍都针对社区版。")]),t._v(" "),a("ul",[a("li",[t._v("Docker 环境安装")])]),t._v(" "),a("p",[t._v("安装详细说明参考官方文档："),a("code",[t._v("https://docs.docker.com/get-docker")]),t._v("，以"),a("code",[t._v("CentOS")]),t._v("为例。")]),t._v(" "),a("ul",[a("li",[t._v("安装所需的软件包")])]),t._v(" "),a("p",[t._v("安装"),a("code",[t._v("yum-utils")]),t._v("包")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("yum "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -y yum-utils\n")])])]),a("p",[t._v("设置存储库")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 官方地址（比较慢）")]),t._v("\nyum-config-manager "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    --add-repo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    https://download.docker.com/linux/centos/docker-ce.repo\n\t\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 阿里云地址（国内地址，相对更快）")]),t._v("\nyum-config-manager "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    --add-repo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n")])])]),a("p",[t._v("安装"),a("code",[t._v("Docker")]),t._v("引擎")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("yum "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" docker-ce docker-ce-cli containerd.io\n")])])]),a("p",[t._v("安装完成后，运行下面的命令，验证是否安装成功。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" version "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看Docker版本信息")]),t._v("\n\nsystemctl start "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动 docker 服务:")]),t._v("\nsystemctl stop "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止 docker 服务:")]),t._v("\nsystemctl status "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 docker 服务状态")]),t._v("\nsystemctl restart "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启 docker 服务")]),t._v("\n")])])]),a("h2",{attrs:{id:"配置镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置镜像"}},[t._v("#")]),t._v(" 配置镜像")]),t._v(" "),a("p",[a("code",[t._v("Docker")]),t._v("默认拉取镜像是从这里拉取("),a("code",[t._v("https://hub.docker.com")]),t._v(")，国外地址拉取的速度比较慢。我们也可以配置国内镜像源。")]),t._v(" "),a("ul",[a("li",[t._v("阿里云镜像加速器")])]),t._v(" "),a("p",[t._v("访问地址："),a("code",[t._v("https://help.aliyun.com/document_detail/60750.html")]),t._v("，进入容器镜像服务控制台创建加速器。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-25befe4051199696c80debe588ccbf4c588.png",alt:"alibaba-docker"}})]),t._v(" "),a("p",[t._v("使用配置文件"),a("code",[t._v("/etc/docker/daemon.json")]),t._v("（没有时新建该文件）。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" /etc/docker/daemon.json\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加如下内容，可以自己替换。默认地址是我的创建的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"registry-mirrors"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://mr63yffu.mirror.aliyuncs.com"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("重启"),a("code",[t._v("Docker Daemon")]),t._v("即可。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("systemctl daemon-reload\n")])])]),a("h2",{attrs:{id:"架构概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#架构概念"}},[t._v("#")]),t._v(" 架构概念")]),t._v(" "),a("p",[t._v("通过下图可以得知，"),a("code",[t._v("Docker")]),t._v("在运行时分为"),a("code",[t._v("Docker引擎（服务端守护进程）")]),t._v("和"),a("code",[t._v("客户端工具")]),t._v("，我们日常使用各种"),a("code",[t._v("docker命令")]),t._v("，其实就是在使用"),a("code",[t._v("客户端工具")]),t._v("与"),a("code",[t._v("Docker")]),t._v("引擎进行交互。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-216ccca6be8f28927f914b667ad9b2dad74.JPEG",alt:"docker"}})]),t._v(" "),a("h3",{attrs:{id:"client-客户端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#client-客户端"}},[t._v("#")]),t._v(" Client 客户端")]),t._v(" "),a("p",[a("code",[t._v("Docker")]),t._v("是一个客户端-服务器（C/S）架构程序。"),a("code",[t._v("Docker")]),t._v("客户端只需要向"),a("code",[t._v("Docker")]),t._v("服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。"),a("code",[t._v("Docker")]),t._v("提供了一个命令行工具"),a("code",[t._v("Docker")]),t._v("以及一整套"),a("code",[t._v("RESTful API")]),t._v("。你可以在同一台宿主机上运行"),a("code",[t._v("Docker")]),t._v("守护进程和客户端，也可以从本地的"),a("code",[t._v("Docker")]),t._v("客户端连接到运行在另一台宿主机上的远程"),a("code",[t._v("Docker")]),t._v("守护进程。")]),t._v(" "),a("h3",{attrs:{id:"host-主机-docker-引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#host-主机-docker-引擎"}},[t._v("#")]),t._v(" Host 主机(Docker 引擎)")]),t._v(" "),a("p",[t._v("一个物理或者虚拟的机器用于执行"),a("code",[t._v("Docker")]),t._v("守护进程和容器。")]),t._v(" "),a("h3",{attrs:{id:"image-镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#image-镜像"}},[t._v("#")]),t._v(" Image 镜像")]),t._v(" "),a("p",[t._v("什么是"),a("code",[t._v("Docker")]),t._v("镜像？简单的理解，"),a("code",[t._v("Docker")]),t._v("镜像就是一个"),a("code",[t._v("Linux")]),t._v("的"),a("code",[t._v("文件系统（Root FileSystem）")]),t._v("，这个文件系统里面包含可以运行在"),a("code",[t._v("Linux")]),t._v("内核的程序以及相应的数据。")]),t._v(" "),a("p",[t._v("通过镜像启动一个容器，一个镜像就是一个可执行的包，其中包括运行应用程序所需要的所有内容：包含代码，运行时间，库，环境变量和配置文件等。")]),t._v(" "),a("p",[t._v("Docker 把 App 文件打包成为一个镜像，并且采用类似多次快照的存储技术，可以实现：")]),t._v(" "),a("ul",[a("li",[t._v("多个"),a("code",[t._v("App")]),t._v("可以共用相同的底层镜像（初始的操作系统镜像）；")]),t._v(" "),a("li",[a("code",[t._v("App")]),t._v("运行时的"),a("code",[t._v("IO")]),t._v("操作和镜像文件隔离；")]),t._v(" "),a("li",[t._v("通过挂载包含不同配置/数据文件的目录或者卷（Volume），单个"),a("code",[t._v("App")]),t._v("镜像可以用来运行无数个不同业务的容器。")])]),t._v(" "),a("h3",{attrs:{id:"container-容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#container-容器"}},[t._v("#")]),t._v(" Container 容器")]),t._v(" "),a("p",[t._v("镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Docker")]),t._v(" "),a("th",{staticStyle:{"text-align":"right"}},[t._v("面向对象")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("镜像")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("类")])]),t._v(" "),a("tr",[a("td",[t._v("容器")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("对象")])])])]),t._v(" "),a("h3",{attrs:{id:"镜像分层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#镜像分层"}},[t._v("#")]),t._v(" 镜像分层")]),t._v(" "),a("p",[t._v("Docker 支持通过扩展现有镜像，创建新的镜像。实际上，"),a("code",[t._v("Docker Hub")]),t._v("中"),a("code",[t._v("99%")]),t._v("的镜像都是通过在"),a("code",[t._v("base")]),t._v("镜像中安装和配置需要的软件构建出来的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-ecb10fa765db240f013173a51f23a56a488.png",alt:"docker"}})]),t._v(" "),a("p",[t._v("从上图可以看到，新镜像是从"),a("code",[t._v("base")]),t._v("镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层。")]),t._v(" "),a("p",[t._v("镜像分层最大的一个好处就是共享资源。比如说有多个镜像都从相同的"),a("code",[t._v("base")]),t._v("镜像构建而来，那么"),a("code",[t._v("Docker Host")]),t._v("只需在磁盘上保存一份"),a("code",[t._v("base")]),t._v("镜像；同时内存中也只需加载一份"),a("code",[t._v("base")]),t._v("镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。")]),t._v(" "),a("p",[t._v("如果多个容器共享一份基础镜像，当某个容器修改了基础镜像的内容，比如"),a("code",[t._v("/etc")]),t._v("下的文件，这时其他容器的"),a("code",[t._v("/etc")]),t._v("是不会被修改的，修改只会被限制在单个容器内。这就是容器"),a("code",[t._v("Copy-on-Write")]),t._v("特性。")]),t._v(" "),a("h3",{attrs:{id:"volume-数据卷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volume-数据卷"}},[t._v("#")]),t._v(" Volume 数据卷")]),t._v(" "),a("p",[t._v("实际上我们的容器就好像是一个简易版的操作系统，只不过系统中只安装了我们的程序运行所需要的环境，前边说到我们的容器是可以删除的，那如果删除了，容器中的程序产生的需要持久化的数据怎么办呢？容器运行的时候我们可以进容器去查看，容器一旦删除就什么都没有了。")]),t._v(" "),a("p",[t._v("所以数据卷就是来解决这个问题的，是用来将数据持久化到我们宿主机上，与容器间实现数据共享，简单的说就是将宿主机的目录映射到容器中的目录，应用程序在容器中的目录读写数据会同步到宿主机上，这样容器产生的数据就可以持久化了，比如我们的数据库容器，就可以把数据存储到我们宿主机上的真实磁盘中。")]),t._v(" "),a("h3",{attrs:{id:"registry-注册中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#registry-注册中心"}},[t._v("#")]),t._v(" Registry 注册中心")]),t._v(" "),a("p",[a("code",[t._v("Docker")]),t._v("用"),a("code",[t._v("Registry")]),t._v("来保存用户构建的镜像。"),a("code",[t._v("Registry")]),t._v("分为公共和私有两种。"),a("code",[t._v("Docker")]),t._v("公司运营公共的"),a("code",[t._v("Registry")]),t._v("叫做"),a("code",[t._v("Docker Hub")]),t._v("。用户可以在"),a("code",[t._v("Docker Hub")]),t._v("注册账号，分享并保存自己的镜像。")]),t._v(" "),a("p",[a("code",[t._v("Docker")]),t._v("公司提供了公共的镜像仓库"),a("code",[t._v("https://hub.docker.com")]),t._v("（Docker 称之为 Repository）提供了庞大的镜像集合供使用。")]),t._v(" "),a("p",[t._v("一个"),a("code",[t._v("Docker Registry")]),t._v("中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。")]),t._v(" "),a("p",[t._v("通常，一个仓库会包含同一个软件不同版本的镜像，而标签对应该软件的各个版本。我们可以通过"),a("code",[t._v("<仓库名>:<标签>")]),t._v("的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以"),a("code",[t._v("latest")]),t._v("作为默认标签。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-e31f10f60dc8a570c46de029c49d9826863.png",alt:"alibaba-docker"}})]),t._v(" "),a("h2",{attrs:{id:"镜像命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#镜像命令"}},[t._v("#")]),t._v(" 镜像命令")]),t._v(" "),a("p",[t._v("官方文档："),a("code",[t._v("https://docs.docker.com/reference")])]),t._v(" "),a("h3",{attrs:{id:"查看镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看镜像"}},[t._v("#")]),t._v(" 查看镜像")]),t._v(" "),a("p",[t._v("执行命令："),a("code",[t._v("docker images")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",{staticStyle:{"text-align":"right"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("REPOSITORY")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("镜像在仓库中的名称")])]),t._v(" "),a("tr",[a("td",[t._v("TAG")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("镜像标签")])]),t._v(" "),a("tr",[a("td",[t._v("IMAGE ID")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("镜像 ID")])]),t._v(" "),a("tr",[a("td",[t._v("CREATED")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("镜像的创建日期")])]),t._v(" "),a("tr",[a("td",[t._v("SIZE")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("镜像大小")])])])]),t._v(" "),a("p",[t._v("这些镜像都是存储在"),a("code",[t._v("Docker")]),t._v("宿主机的"),a("code",[t._v("/var/lib/docker")]),t._v("目录下。")]),t._v(" "),a("h3",{attrs:{id:"搜索镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搜索镜像"}},[t._v("#")]),t._v(" 搜索镜像")]),t._v(" "),a("p",[t._v("如果你需要从网络中查找需要的镜像，可以通过以下命令搜索。")]),t._v(" "),a("p",[t._v("执行命令："),a("code",[t._v("docker search 镜像名称")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",{staticStyle:{"text-align":"right"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("NAME")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("镜像名称")])]),t._v(" "),a("tr",[a("td",[t._v("DESCRIPTION")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("镜像描述")])]),t._v(" "),a("tr",[a("td",[t._v("STARS")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("用户评价")])]),t._v(" "),a("tr",[a("td",[t._v("OFFICIAL")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("是否为官方构建")])]),t._v(" "),a("tr",[a("td",[t._v("AUTOMATED")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("Docker Hub 自动构建")])])])]),t._v(" "),a("h3",{attrs:{id:"拉取镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拉取镜像"}},[t._v("#")]),t._v(" 拉取镜像")]),t._v(" "),a("p",[t._v("拉取镜像就是从中央仓库下载镜像到本地。")]),t._v(" "),a("p",[t._v("执行命令："),a("code",[t._v("docker pull 镜像名称")])]),t._v(" "),a("p",[t._v("如果不声明"),a("code",[t._v("tag")]),t._v("镜像标签信息则默认拉取"),a("code",[t._v("latest")]),t._v("版本。")]),t._v(" "),a("h3",{attrs:{id:"删除镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除镜像"}},[t._v("#")]),t._v(" 删除镜像")]),t._v(" "),a("p",[t._v("按镜像"),a("code",[t._v("ID")]),t._v("删除单个镜像。")]),t._v(" "),a("p",[t._v("执行命令："),a("code",[t._v("docker rmi 镜像ID")])]),t._v(" "),a("p",[t._v("按镜像"),a("code",[t._v("ID")]),t._v("删除多个镜像。")]),t._v(" "),a("p",[t._v("执行命令："),a("code",[t._v("docker rmi 镜像ID 镜像ID 镜像ID")])]),t._v(" "),a("p",[a("code",[t._v("docker images -q")]),t._v("可以查询到所有镜像的"),a("code",[t._v("ID")]),t._v("，通过组合命令可以实现删除所有镜像的操作。")]),t._v(" "),a("p",[t._v("执行命令："),a("code",[t._v("docker rmi docker images -q")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("注意：如果通过某个镜像创建了容器，则该镜像无法删除。"),a("br"),t._v("\n解决办法：先删除镜像中的容器，再删除该镜像。")])]),t._v(" "),a("h2",{attrs:{id:"容器命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器命令"}},[t._v("#")]),t._v(" 容器命令")]),t._v(" "),a("h3",{attrs:{id:"查看容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看容器"}},[t._v("#")]),t._v(" 查看容器")]),t._v(" "),a("p",[t._v("查看正在运行的容器。")]),t._v(" "),a("p",[t._v("执行命令："),a("code",[t._v("docker ps")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",{staticStyle:{"text-align":"right"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("CONTAINER ID")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("容器 ID")])]),t._v(" "),a("tr",[a("td",[t._v("IMAGE")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("所属镜像")])]),t._v(" "),a("tr",[a("td",[t._v("COMMAND")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("启动容器时运行的命令")])]),t._v(" "),a("tr",[a("td",[t._v("CREATED")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("创建时间")])]),t._v(" "),a("tr",[a("td",[t._v("STATUS")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("容器状态")])]),t._v(" "),a("tr",[a("td",[t._v("PORTS")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("端口")])]),t._v(" "),a("tr",[a("td",[t._v("NAMES")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("容器名称")])])])]),t._v(" "),a("p",[t._v("查看停止的容器。")]),t._v(" "),a("p",[t._v("执行命令："),a("code",[t._v("docker ps -f status=exited")])]),t._v(" "),a("p",[t._v("查看所有容器（包括运行和停止）。")]),t._v(" "),a("p",[t._v("执行命令："),a("code",[t._v("docker ps -a")])]),t._v(" "),a("p",[t._v("查看最后一次运行的容器。")]),t._v(" "),a("p",[t._v("执行命令："),a("code",[t._v("docker ps -l")])]),t._v(" "),a("p",[t._v("列出最近创建的 n 个容器。")]),t._v(" "),a("p",[t._v("执行命令："),a("code",[t._v("docker ps -n 5")])]),t._v(" "),a("h3",{attrs:{id:"创建与启动容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建与启动容器"}},[t._v("#")]),t._v(" 创建与启动容器")]),t._v(" "),a("p",[a("code",[t._v("docker run [OPTIONS] IMAGE [COMMAND] [ARG...]")])]),t._v(" "),a("ul",[a("li",[t._v("-i：表示运行容器；")]),t._v(" "),a("li",[t._v("-t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端；")]),t._v(" "),a("li",[t._v("--name：为创建的容器命名；")]),t._v(" "),a("li",[t._v("-v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个 -v 做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上；")]),t._v(" "),a("li",[t._v("-d：在 run 后面加上 -d 参数，则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加 -i -t 两个参数，创建容器后就会自动进容器里）；")]),t._v(" "),a("li",[t._v("-p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个 -p 做多个端口映射。")]),t._v(" "),a("li",[t._v("-P：随机使用宿主机的可用端口与容器内暴露的端口映射。")])]),t._v(" "),a("h3",{attrs:{id:"创建并进入容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建并进入容器"}},[t._v("#")]),t._v(" 创建并进入容器")]),t._v(" "),a("p",[t._v("下面这行命令的意思就是通过镜像 AA 创建一个容器 BB，运行容器并进入容器的"),a("code",[t._v("/bin/bash")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("docker run -it --name 容器名称 镜像名称:标签 /bin/bash")])]),t._v(" "),a("p",[t._v("注意："),a("code",[t._v("Docker")]),t._v("容器运行必须有一个前台进程，如果没有前台进程执行，容器认为是空闲状态，就会自动退出。")]),t._v(" "),a("h3",{attrs:{id:"退出当前容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#退出当前容器"}},[t._v("#")]),t._v(" 退出当前容器")]),t._v(" "),a("p",[a("code",[t._v("exit")])]),t._v(" "),a("h3",{attrs:{id:"守护式方式创建容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#守护式方式创建容器"}},[t._v("#")]),t._v(" 守护式方式创建容器")]),t._v(" "),a("p",[a("code",[t._v("docker run -di --name 容器名称 镜像名称:标签")])]),t._v(" "),a("h3",{attrs:{id:"登录守护式容器方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#登录守护式容器方式"}},[t._v("#")]),t._v(" 登录守护式容器方式")]),t._v(" "),a("p",[a("code",[t._v("docker exec -it 容器名称|容器ID /bin/bash")])]),t._v(" "),a("h3",{attrs:{id:"停止与启动容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#停止与启动容器"}},[t._v("#")]),t._v(" 停止与启动容器")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" stop 容器名称"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("容器ID\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" start 容器名称"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("容器ID\n")])])]),a("h3",{attrs:{id:"文件拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件拷贝"}},[t._v("#")]),t._v(" 文件拷贝")]),t._v(" "),a("p",[t._v("如果我们需要将文件拷贝到容器内可以使用"),a("code",[t._v("cp")]),t._v("命令。")]),t._v(" "),a("p",[a("code",[t._v("docker cp 需要拷贝的文件或目录 容器名称:容器目录")])]),t._v(" "),a("p",[t._v("也可以将文件从容器内拷贝出来。")]),t._v(" "),a("p",[a("code",[t._v("docker cp 容器名称:容器目录 需要拷贝的文件或目录")])]),t._v(" "),a("h3",{attrs:{id:"目录挂载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录挂载"}},[t._v("#")]),t._v(" 目录挂载")]),t._v(" "),a("p",[t._v("我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器，而且这个操作是双向绑定的，也就是说容器内的操作也会影响到宿主机，实现备份功能。")]),t._v(" "),a("p",[t._v("但是容器被删除的时候，宿主机的内容并不会被删除。如果多个容器挂载同一个目录，其中一个容器被删除，其他容器的内容也不会受到影响。")]),t._v(" "),a("p",[t._v("创建容器添加"),a("code",[t._v("-v")]),t._v("参数，格式为宿主机目录:容器目录，例如：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -di -v /home/ruoyi/data:/usr/local/data --name centos7-01 centos:7\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 多目录挂载")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -di -v /宿主机目录:/容器目录 -v /宿主机目录2:/容器目录2 镜像名\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("目录挂载操作可能会出现权限不足的提示。这是因为"),a("code",[t._v("CentOS7")]),t._v("中的安全模块"),a("code",[t._v("SELinux")]),t._v("把权限禁掉了，在"),a("code",[t._v("docker run")]),t._v("时通过"),a("code",[t._v("--privileged=true")]),t._v("给该容器加权限来解决挂载的目录没有权限的问题。")])]),t._v(" "),a("ul",[a("li",[t._v("匿名挂载")])]),t._v(" "),a("p",[t._v("匿名挂载只需要写容器目录即可，容器外对应的目录会在"),a("code",[t._v("/var/lib/docker/volumes")]),t._v("中生成。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 匿名挂载")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -di -v /usr/local/data --name centos7-02 centos:7\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 volume 数据卷信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" volume "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\n")])])]),a("ul",[a("li",[t._v("具名挂载")])]),t._v(" "),a("p",[t._v("具名挂载就是给数据卷起了个名字，容器外对应的目录会在"),a("code",[t._v("/var/lib/docker/volume")]),t._v("中生成。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 匿名挂载")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -di -v docker_centos_data:/usr/local/data --name centos7-03 centos:7\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 volume 数据卷信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" volume "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\n")])])]),a("ul",[a("li",[t._v("指定目录挂载")])]),t._v(" "),a("p",[t._v("之前挂载方式就属于指定目录挂载，这种方式的挂载不会在"),a("code",[t._v("/var/lib/docker/volume")]),t._v("目录生成内容。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -di -v /mydata/docker_centos/data:/usr/local/data --name centos7-01 centos:7\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 多目录挂载")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -di -v /宿主机目录:/容器目录 -v /宿主机目录2:/容器目录2 镜像名\n")])])]),a("ul",[a("li",[t._v("查看目录挂载关系")])]),t._v(" "),a("p",[t._v("通过"),a("code",[t._v("docker volume inspect")]),t._v("数据卷名称 可以查看该数据卷对应宿主机的目录地址。")]),t._v(" "),a("p",[t._v("执行命令："),a("code",[t._v("docker volume inspect docker_centos_data")])]),t._v(" "),a("p",[t._v("通过"),a("code",[t._v("docker inspect")]),t._v("容器ID或名称 ，在返回的"),a("code",[t._v("JSON")]),t._v("节点中找到"),a("code",[t._v("Mounts")]),t._v("，可以查看详细的数据挂载信息。")]),t._v(" "),a("ul",[a("li",[t._v("只读/读写")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只读。只能通过修改宿主机内容实现对容器的数据管理。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it -v /宿主机目录:/容器目录:ro 镜像名\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 读写，默认。宿主机和容器可以双向操作数据。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it -v /宿主机目录:/容器目录:rw 镜像名\n")])])]),a("h3",{attrs:{id:"删除容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除容器"}},[t._v("#")]),t._v(" 删除容器")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除指定容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" 容器名称"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("容器ID\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除多个容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" 容器名称"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("容器ID 容器名称"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("容器ID\n")])])]),a("h3",{attrs:{id:"查看容器-ip-地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看容器-ip-地址"}},[t._v("#")]),t._v(" 查看容器 IP 地址")]),t._v(" "),a("p",[t._v("我们可以通过以下命令查看容器的元信息。")]),t._v(" "),a("p",[a("code",[t._v("docker inspect 容器名称|容器ID")])]),t._v(" "),a("p",[t._v("也可以直接执行下面的命令直接输出 IP 地址。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" inspect --format"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{{.NetworkSettings.IPAddress}}'")]),t._v(" 容器名称"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("容器ID\n")])])]),a("h2",{attrs:{id:"应用部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用部署"}},[t._v("#")]),t._v(" 应用部署")]),t._v(" "),a("h3",{attrs:{id:"nacos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos"}},[t._v("#")]),t._v(" Nacos")]),t._v(" "),a("p",[t._v("拉取官方"),a("code",[t._v("nacos")]),t._v("镜像")]),t._v(" "),a("p",[t._v("执行命令："),a("code",[t._v("docker pull nacos/nacos-server")])]),t._v(" "),a("p",[t._v("启动"),a("code",[t._v("nacos")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run --env "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("MODE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("standalone --name nacos -d -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8848")]),t._v(":8848 nacos/nacos-server\n")])])]),a("ul",[a("li",[a("code",[t._v("MODE=standalone")]),t._v("表示单机启动")])]),t._v(" "),a("h3",{attrs:{id:"nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[t._v("#")]),t._v(" Nginx")]),t._v(" "),a("p",[t._v("拉取官方"),a("code",[t._v("nginx")]),t._v("镜像")]),t._v(" "),a("p",[t._v("执行命令："),a("code",[t._v("docker pull nginx")])]),t._v(" "),a("p",[t._v("创建"),a("code",[t._v("Nginx")]),t._v("容器。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -di --name nginx -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(":80 nginx\n")])])]),a("p",[t._v("将容器内的配置文件拷贝到指定目录（请先提前创建好目录）。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p /home/ruoyi/nginx\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将容器内的配置文件拷贝到指定目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" nginx:/etc/nginx /home/ruoyi/nginx/conf\n")])])]),a("p",[t._v("终止并删除容器")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" stop nginx\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" nginx\n")])])]),a("p",[t._v("创建"),a("code",[t._v("Nginx")]),t._v("容器，并将容器中的"),a("code",[t._v("/etc/nginx")]),t._v("目录和宿主机的"),a("code",[t._v("/home/ruoyi/nginx/conf")]),t._v("目录进行挂载。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -di --name nginx -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(":80 -v /home/ruoyi/nginx/conf:/etc/nginx nginx\n")])])]),a("h3",{attrs:{id:"mysql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[t._v("#")]),t._v(" Mysql")]),t._v(" "),a("p",[t._v("拉取官方"),a("code",[t._v("mysql5.7")]),t._v("镜像")]),t._v(" "),a("p",[t._v("执行命令："),a("code",[t._v("docker pull mysql:5.7")])]),t._v(" "),a("ul",[a("li",[t._v("创建容器")])]),t._v(" "),a("p",[t._v("在本地创建"),a("code",[t._v("mysql")]),t._v("的映射目录")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p /home/mysql/data /home/mysql/logs /home/mysql/conf\n")])])]),a("p",[t._v("创建容器，将数据、日志、配置文件映射到本机")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3306")]),t._v(":3306 --name mysql -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/logs:/logs -v /home/mysql/data:/var/lib/mysql -e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("MYSQL_ROOT_PASSWORD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("password -d mysql:5.7\n")])])]),a("ul",[a("li",[t._v("-d: 后台运行容器")]),t._v(" "),a("li",[t._v("-p 将容器的端口映射到本机的端口")]),t._v(" "),a("li",[t._v("-v 将主机目录挂载到容器的目录")]),t._v(" "),a("li",[t._v("-e 设置参数")])]),t._v(" "),a("p",[t._v("进入容器/执行命令："),a("code",[t._v("docker exec -it mysql /bin/bash")])]),t._v(" "),a("h3",{attrs:{id:"redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[t._v("#")]),t._v(" Redis")]),t._v(" "),a("p",[t._v("拉取官方"),a("code",[t._v("redis")]),t._v("镜像")]),t._v(" "),a("p",[t._v("执行命令："),a("code",[t._v("docker pull redis")])]),t._v(" "),a("p",[t._v("创建容器。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -di --name redis -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v(":6379 redis\n")])])]),a("p",[t._v("连接容器中的"),a("code",[t._v("Redis")]),t._v("时，只需要连接宿主机的"),a("code",[t._v("IP + 指定的映射端口")]),t._v("即可。")]),t._v(" "),a("h2",{attrs:{id:"镜像构建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#镜像构建"}},[t._v("#")]),t._v(" 镜像构建")]),t._v(" "),a("p",[t._v("我们可以通过公共仓库拉取镜像使用，但是，有些时候公共仓库拉取的镜像并不符合我们的需求。尽管已经从繁琐的部署工作中解放出来，但是实际开发时，我们可能希望镜像包含整个项目的完整环境，在其他机器上拉取打包完整的镜像，直接运行即可。")]),t._v(" "),a("p",[t._v("Docker 支持自己构建镜像，还支持将自己构建的镜像上传至公共仓库，镜像构建可以通过以下两种方式来实现：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker commit")]),t._v("：从容器创建一个新的镜像；")]),t._v(" "),a("li",[a("code",[t._v("docker build")]),t._v("： 配合"),a("code",[t._v("Dockerfile")]),t._v("文件创建镜像。")])]),t._v(" "),a("p",[t._v("下面我们先通过"),a("code",[t._v("docker commit")]),t._v("来实现镜像的构建。")]),t._v(" "),a("p",[t._v("目标：接下来我们通过基础镜像"),a("code",[t._v("centos:7")]),t._v("，在该镜像中安装"),a("code",[t._v("jdk")]),t._v("和"),a("code",[t._v("tomcat")]),t._v("以后将其制作为一个新的镜像"),a("code",[t._v("mycentos:7")]),t._v("。")]),t._v(" "),a("p",[t._v("创建容器")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取镜像")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull centos:7\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -di --name centos7 centos:7\n")])])]),a("p",[t._v("拷贝资源")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将宿主机的 jdk 和 tomcat 拷贝至容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" jdk-8u111-linux-x64.tar.gz centos7:/root\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" apache-tomcat-8.5.27.tar.gz centos7:/root\n")])])]),a("p",[t._v("安装资源")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it centos7 /bin/bash\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换至 /root 目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" root/\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建 java 和 tomcat 目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p /usr/local/java\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p /usr/local/tomcat\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 jdk 和 tomcat 解压至容器 /usr/local/java 和 /usr/local/tomcat 目录中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" -zxvf jdk-8u111-linux-x64.tar.gz -C /usr/local/java/\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" -zxvf apache-tomcat-8.5.27.tar.gz -C /usr/local/tomcat/\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置 jdk 环境变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vi")]),t._v(" /etc/profile\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在环境变量文件中添加以下内容")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("JAVA_HOME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/usr/local/java/jdk1.8.0_111/\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PATH")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$JAVA_HOME")]),t._v("/bin\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新加载环境变量文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" /etc/profile\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 测试环境变量是否配置成功")]),t._v("\njava -version\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除容器内 jdk 和 tomcat")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" jdk-8u111-linux-x64.tar.gz apache-tomcat-8.5.27.tar.gz -rf\n")])])]),a("p",[t._v("构建镜像")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("OPTIONS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" CONTAINER "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("REPOSITORY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":TAG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" commit -a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ruoyi"')]),t._v(" -m"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jdk8 and tomcat8"')]),t._v(" centos7 mycentos:7\n")])])]),a("ul",[a("li",[t._v("-a：提交的镜像作者；")]),t._v(" "),a("li",[t._v("-c：使用 Dockerfile 指令来创建镜像；")]),t._v(" "),a("li",[t._v("-m：提交时的说明文字；")]),t._v(" "),a("li",[t._v("-p：在 commit 时，将容器暂停。")])]),t._v(" "),a("p",[t._v("使用构建的镜像创建容器")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -di --name mycentos7 -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v(":8080 mycentos:7\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it mycentos7 /bin/bash\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新加载配置文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" /etc/profile\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 测试 java 环境变量")]),t._v("\njava -version\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动 tomcat")]),t._v("\n/usr/local/tomcat/apache-tomcat-8.5.27/bin/startup.sh\n")])])]),a("p",[t._v("访问"),a("code",[t._v("http://{ip}:{port}")]),t._v("，看到"),a("code",[t._v("tomcat")]),t._v("页面说明环境表示成功。")]),t._v(" "),a("h2",{attrs:{id:"dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[t._v("#")]),t._v(" Dockerfile")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("Docker")]),t._v("中构建镜像最常用的方式，就是使用"),a("code",[t._v("Dockerfile")]),t._v("。"),a("code",[t._v("Dockerfile")]),t._v("是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。官方文档："),a("code",[t._v("https://docs.docker.com/engine/reference/builder")])]),t._v(" "),a("h3",{attrs:{id:"dockerfile-常用指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-常用指令"}},[t._v("#")]),t._v(" Dockerfile 常用指令")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("指令")]),t._v(" "),a("th",[t._v("语法")]),t._v(" "),a("th",{staticStyle:{"text-align":"right"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("FROM")]),t._v(" "),a("td",[a("code",[t._v("FROM <image>:<tag>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("指明构建的新镜像是来自于哪个基础镜像，如果没有选择"),a("code",[t._v("tag")]),t._v("，那么默认值为"),a("code",[t._v("latest")])])]),t._v(" "),a("tr",[a("td",[t._v("MAINTAINER")]),t._v(" "),a("td",[a("code",[t._v("MAINTAINER <name>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("指明镜像维护者及其联系方式（一般是邮箱地址）。官方说明已过时，推荐使用"),a("code",[t._v("LABEL")])])]),t._v(" "),a("tr",[a("td",[t._v("LABEL")]),t._v(" "),a("td",[a("code",[t._v("LABEL <key>=<value> ...")])]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("功能是为镜像指定标签。也可以使用"),a("code",[t._v("LABEL")]),t._v("来指定镜像作者")])]),t._v(" "),a("tr",[a("td",[t._v("RUN")]),t._v(" "),a("td",[a("code",[t._v("RUN <command>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("构建镜像时运行的"),a("code",[t._v("Shell")]),t._v("命令，比如构建的新镜像中我们想在"),a("code",[t._v("/usr/local")]),t._v("目录下创建一个"),a("code",[t._v("java")]),t._v("目录")])]),t._v(" "),a("tr",[a("td",[t._v("ADD")]),t._v(" "),a("td",[a("code",[t._v("ADD <src>... <dest>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("拷贝文件或目录到镜像中。src 可以是一个本地文件，还可以是一个"),a("code",[t._v("url")]),t._v("。然后自动下载和解压")])]),t._v(" "),a("tr",[a("td",[t._v("COPY")]),t._v(" "),a("td",[a("code",[t._v("COPY <src>... <dest>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("拷贝文件或目录到镜像中。用法同 ADD，只是不支持自动下载和解压")])]),t._v(" "),a("tr",[a("td",[t._v("EXPOSE")]),t._v(" "),a("td",[a("code",[t._v("EXPOSE <port> [<port>/<protocol>...]")])]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("暴露容器运行时的监听端口给外部，可以指定端口是监听 TCP 还是 UDP，如果未指定协议，则默认为 TCP")])]),t._v(" "),a("tr",[a("td",[t._v("ENV")]),t._v(" "),a("td",[a("code",[t._v("ENV <key>=<value> ...")])]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("设置容器内环境变量")])]),t._v(" "),a("tr",[a("td",[t._v("CMD")]),t._v(" "),a("td",[a("code",[t._v('CMD ["executable","param1","param2"]')])]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("启动容器时执行的"),a("code",[t._v("Shell")]),t._v("命令。在"),a("code",[t._v("Dockerfile")]),t._v("中只能有一条"),a("code",[t._v("CMD")]),t._v("指令。如果设置了多条"),a("code",[t._v("CMD")]),t._v("，只有最后一条会生效")])]),t._v(" "),a("tr",[a("td",[t._v("ENTRYPOINT")]),t._v(" "),a("td",[a("code",[t._v('ENTRYPOINT ["executable", "param1", "param2"]')])]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("启动容器时执行的 Shell 命令，同 CMD 类似，不会被 docker run 命令行指定的参数所覆盖，如果设置了多条"),a("code",[t._v("ENTRYPOINT")]),t._v("，只有最后一条会生效")])]),t._v(" "),a("tr",[a("td",[t._v("WORKDIR")]),t._v(" "),a("td",[a("code",[t._v("WORKDIR param")])]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("为 RUN、CMD、ENTRYPOINT 以及 COPY 和 AND 设置工作目录")])]),t._v(" "),a("tr",[a("td",[t._v("VOLUME")]),t._v(" "),a("td",[a("code",[t._v('VOLUME ["param"]')])]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("指定容器挂载点到宿主机自动生成的目录或其他容器。一般的使用场景为需要持久化存储数据时")])])])]),t._v(" "),a("h3",{attrs:{id:"构建镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建镜像"}},[t._v("#")]),t._v(" 构建镜像")]),t._v(" "),a("p",[a("code",[t._v("Dockerfile")]),t._v("文件编写好以后，真正构建镜像时需要通过"),a("code",[t._v("docker build")]),t._v("命令。")]),t._v(" "),a("p",[a("code",[t._v("docker build")]),t._v("命令用于使用"),a("code",[t._v("Dockerfile")]),t._v("创建镜像。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用当前目录的 Dockerfile 创建镜像")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build -t mycentos:7 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过 -f Dockerfile 文件的位置创建镜像")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build -f /home/ruoyi/docker/Dockerfile -t mycentos:7 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),a("ul",[a("li",[t._v("-f：指定要使用的 Dockerfile 路径；")]),t._v(" "),a("li",[t._v("--tag, -t：镜像的名字及标签，可以在一次构建中为一个镜像设置多个标签。")])]),t._v(" "),a("h3",{attrs:{id:"dockerfile-实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-实践"}},[t._v("#")]),t._v(" Dockerfile 实践")]),t._v(" "),a("p",[t._v("接下来我们通过基础镜像"),a("code",[t._v("centos:7")]),t._v("，在该镜像中安装"),a("code",[t._v("jdk")]),t._v("和"),a("code",[t._v("tomcat")]),t._v("以后将其制作为一个新的镜像"),a("code",[t._v("mycentos:7")])]),t._v(" "),a("p",[t._v("创建目录，编写"),a("code",[t._v("Dockerfile")]),t._v("文件")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p /usr/local/"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("dockerfile"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n")])])]),a("p",[t._v("执行命令："),a("code",[t._v("vi Dockerfile")]),t._v("，写入信息。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指明构建的新镜像是来自于`centos:7`基础镜像")]),t._v("\nFROM centos:7\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过镜像标签声明了作者信息")]),t._v("\nLABEL "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("maintainer")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ruoyi.vip"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置工作目录")]),t._v("\nWORKDIR /usr/local\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新镜像构建成功以后创建指定目录")]),t._v("\nRUN "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p /usr/local/java "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p /usr/local/tomcat\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拷贝文件到镜像中并解压")]),t._v("\nADD jdk-8u111-linux-x64.tar.gz /usr/local/java\nADD apache-tomcat-8.5.27.tar.gz /usr/local/tomcat\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 暴露容器运行时的 8080 监听端口给外部")]),t._v("\nEXPOSE "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置容器内 JAVA_HOME 环境变量")]),t._v("\nENV JAVA_HOME /usr/local/java/jdk1.8.0_111\nENV "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PATH")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$JAVA_HOME")]),t._v("/bin\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动容器时启动 tomcat")]),t._v("\nCMD "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/usr/local/tomcat/apache-tomcat-8.5.27/bin/catalina.sh"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"run"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("构建镜像")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build -f /home/ruoyi/docker/Dockerfile -t mycentos:test "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),a("p",[t._v("启动镜像")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -di --name mycentos -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v(":8080 mycentos:test\n")])])]),a("p",[t._v("进入容器")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it mycentos7 /bin/bash\n")])])]),a("h3",{attrs:{id:"镜像构建历史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#镜像构建历史"}},[t._v("#")]),t._v(" 镜像构建历史")]),t._v(" "),a("p",[a("code",[t._v("docker history 镜像名称:标签|ID")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("history")]),t._v(" mycentos:7\n")])])]),a("h2",{attrs:{id:"镜像仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#镜像仓库"}},[t._v("#")]),t._v(" 镜像仓库")]),t._v(" "),a("p",[t._v("我们使用的镜像都是从"),a("code",[t._v("DockerHub")]),t._v("公共仓库拉取的，我们也学习了如何制作自己的镜像，但是通过"),a("code",[t._v("tar")]),t._v("包的方式实现镜像的备份恢复迁移对于团队协作开发并不是特别友好，我们也可以将镜像推送至"),a("code",[t._v("DockerHub")]),t._v("仓库方便使用。")]),t._v(" "),a("p",[t._v("温馨提示：如果构建的镜像内携带了项目数据，建议还是使用私有仓库比较好。")]),t._v(" "),a("h3",{attrs:{id:"注册账号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册账号"}},[t._v("#")]),t._v(" 注册账号")]),t._v(" "),a("p",[t._v("官网："),a("code",[t._v("https://hub.docker.com")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-86c7ba7bd32377d3dd5420f5f0926290647.png",alt:"docker"}})]),t._v(" "),a("h3",{attrs:{id:"登录账号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#登录账号"}},[t._v("#")]),t._v(" 登录账号")]),t._v(" "),a("p",[t._v("通过"),a("code",[t._v("docker login")]),t._v("命令输入账号密码登录"),a("code",[t._v("DockerHub")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-505dc6408f10079822d4fa3c5eb201b3b82.png",alt:"docker"}})]),t._v(" "),a("h3",{attrs:{id:"推送镜像至仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推送镜像至仓库"}},[t._v("#")]),t._v(" 推送镜像至仓库")]),t._v(" "),a("p",[t._v("为了方便测试，我们将"),a("code",[t._v("hello-world")]),t._v("镜像拉取至本地，然后再上传至"),a("code",[t._v("DockerHub")]),t._v("仓库中。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" tag hello-world:latest ruoyivip/test-hello-world:1.0.0\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" push ruoyivip/test-hello-world:1.0.0\n")])])]),a("h3",{attrs:{id:"查看仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看仓库"}},[t._v("#")]),t._v(" 查看仓库")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-7589f00e3b6c4e83a07e318a4298580381c.png",alt:"docker"}})]),t._v(" "),a("h3",{attrs:{id:"拉取镜像-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拉取镜像-2"}},[t._v("#")]),t._v(" 拉取镜像")]),t._v(" "),a("p",[t._v("通过"),a("code",[t._v("docker pull ruoyivip/test-hello-world:1.0.0")]),t._v("测试镜像是否可以拉取。")]),t._v(" "),a("h3",{attrs:{id:"退出账号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#退出账号"}},[t._v("#")]),t._v(" 退出账号")]),t._v(" "),a("p",[t._v("通过"),a("code",[t._v("docker logout")]),t._v("退出账号")]),t._v(" "),a("h2",{attrs:{id:"docker-compose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose"}},[t._v("#")]),t._v(" Docker Compose")]),t._v(" "),a("p",[t._v("通过前面几篇文章的学习，我们可以通过"),a("code",[t._v("Dockerfile")]),t._v("文件让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况，或者开发一个"),a("code",[t._v("Web")]),t._v("应用，除了"),a("code",[t._v("Web")]),t._v("服务容器本身，还需要数据库服务容器、缓存容器，甚至还包括负载均衡容器等等。")]),t._v(" "),a("p",[a("code",[t._v("Docker Compose")]),t._v("恰好满足了这样的需求，它是用于定义和运行多容器"),a("code",[t._v("Docker")]),t._v("应用程序的工具。通过"),a("code",[t._v("Compose")]),t._v("，您可以使用"),a("code",[t._v("YAML")]),t._v("文件来配置应用程序所需要的服务。然后使用一个命令，就可以通过"),a("code",[t._v("YAML")]),t._v("配置文件创建并启动所有服务。")]),t._v(" "),a("p",[a("code",[t._v("Docker Compose")]),t._v("项目是"),a("code",[t._v("Docker")]),t._v("官方的开源项目，来源于之前的"),a("code",[t._v("Fig")]),t._v("项目，使用"),a("code",[t._v("Python")]),t._v("语言编写。负责实现对"),a("code",[t._v("Docker")]),t._v("容器集群的快速编排。项目地址为："),a("code",[t._v("https://github.com/docker/compose/releases")])]),t._v(" "),a("p",[a("code",[t._v("Docker Compose")]),t._v("使用的三个步骤为：")]),t._v(" "),a("ul",[a("li",[t._v("使用"),a("code",[t._v("Dockerfile")]),t._v("文件定义应用程序的环境；")]),t._v(" "),a("li",[t._v("使用"),a("code",[t._v("docker-compose.yml")]),t._v("文件定义构成应用程序的服务，这样它们可以在隔离环境中一起运行；")]),t._v(" "),a("li",[t._v("执行"),a("code",[t._v("docker-compose up")]),t._v("命令来创建并启动所有服务。")])]),t._v(" "),a("h3",{attrs:{id:"compose-安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compose-安装"}},[t._v("#")]),t._v(" Compose 安装")]),t._v(" "),a("p",[t._v("官方文档：https://docs.docker.com/compose/install/")]),t._v(" "),a("p",[t._v("您可以在"),a("code",[t._v("macOS")]),t._v("，"),a("code",[t._v("Windows")]),t._v("和"),a("code",[t._v("Linux")]),t._v("上运行"),a("code",[t._v("Compose")]),t._v("。本文演示基于"),a("code",[t._v("Linux")]),t._v("环境的安装。我们可以使用"),a("code",[t._v("curl")]),t._v("命令从"),a("code",[t._v("Github")]),t._v("下载它的二进制文件来使用，运行以下命令下载"),a("code",[t._v("Docker Compose")]),t._v("的当前稳定版本。或者从网页下载后上传至服务器指定目录"),a("code",[t._v("/usr/local/bin")]),t._v("也行。")]),t._v(" "),a("ul",[a("li",[t._v("下载")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -L "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://github.com/docker/compose/releases/download/1.26.2/docker-compose-'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uname")]),t._v(" -s"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("-"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uname")]),t._v(" -m"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v(" -o /usr/local/bin/docker-compose\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因为Docker Compose存放在GitHub，可能不太稳定。可以通过DaoCloud加速下载")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -L https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uname")]),t._v(" -s"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("-"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uname")]),t._v(" -m"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /usr/local/bin/docker-compose\n")])])]),a("p",[t._v("您可以通过修改 URL 中的版本，自定义您所需要的版本文件。")]),t._v(" "),a("p",[t._v("安装完成以后，查看指定目录，发现该文件没有可执行权限，进行授权操作。")]),t._v(" "),a("ul",[a("li",[t._v("授权")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将可执行权限应用于该二进制文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" +x /usr/local/bin/docker-compose\n")])])]),a("ul",[a("li",[t._v("测试")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" --version\n")])])]),a("ul",[a("li",[t._v("卸载")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" /usr/local/bin/docker-compose\n")])])]),a("h3",{attrs:{id:"docker-compose-yml-文件详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yml-文件详解"}},[t._v("#")]),t._v(" docker-compose.yml 文件详解")]),t._v(" "),a("p",[t._v("官方文档："),a("code",[t._v("https://docs.docker.com/compose/compose-file/")])]),t._v(" "),a("p",[a("code",[t._v("Docker Compose")]),t._v("允许用户通过"),a("code",[t._v("docker-compose.yml")]),t._v("文件（YAML 格式）来定义一组相关联的容器为一个工程（project）。一个工程包含多个服务（service），每个服务中定义了创建容器时所需的镜像、参数、依赖等。")]),t._v(" "),a("p",[a("code",[t._v("Docker Compose")]),t._v("模板文件我们需要关注的顶级配置有"),a("code",[t._v("version")]),t._v("、"),a("code",[t._v("services")]),t._v("、"),a("code",[t._v("networks")]),t._v("、"),a("code",[t._v("volumes")]),t._v("几个部分，除"),a("code",[t._v("version")]),t._v("外，其他几个顶级配置下还有很多下级配置，后面也会详细给大家介绍，先来看看这几个顶级配置都什么意思：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("version")]),t._v("：描述"),a("code",[t._v("Compose")]),t._v("文件的版本信息，当前最新版本为"),a("code",[t._v("3.8")]),t._v("，对应的"),a("code",[t._v("Docker")]),t._v("版本为"),a("code",[t._v("19.03.0+")])]),t._v(" "),a("li",[a("code",[t._v("services")]),t._v("：定义服务，可以多个，每个服务中定义了创建容器时所需的镜像、参数、依赖等")]),t._v(" "),a("li",[a("code",[t._v("networkds")]),t._v("：定义网络，可以多个，根据"),a("code",[t._v("DNS server")]),t._v("让相同网络中的容器可以直接通过容器名称进行通信")]),t._v(" "),a("li",[a("code",[t._v("volumes")]),t._v("：数据卷，用于实现目录挂载")])]),t._v(" "),a("p",[t._v("示例")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 描述 Compose 文件的版本信息")]),t._v("\nversion: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3.8"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义服务，可以多个")]),t._v("\nservices:\n  nginx: "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 服务名称")]),t._v("\n    image: nginx "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建容器时所需的镜像")]),t._v("\n    container_name: mynginx "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 容器名称，默认为"工程名称_服务条目名称_序号"')]),t._v("\n    ports: "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 宿主机与容器的端口映射关系")]),t._v("\n      - "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"80:80"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 左边宿主机端口:右边容器端口")]),t._v("\n    networks: "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置容器连接的网络，引用顶级 networks 下的条目")]),t._v("\n      - nginx-net\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 定义网络，可以多个。如果不声明，默认会创建一个网络名称为"工程名称_default"的 bridge 网络')]),t._v("\nnetworks:\n  nginx-net: "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一个具体网络的条目名称")]),t._v("\n    name: nginx-net "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 网络名称，默认为"工程名称_网络条目名称"')]),t._v("\n    driver: bridge "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 网络模式，默认为 bridge")]),t._v("\n")])])]),a("p",[t._v("使用"),a("code",[t._v("docker-compose up")]),t._v("创建并启动所有服务。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 前台启动")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" up\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 后台启动")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" up -d\n")])])]),a("p",[t._v("浏览器访问：http://192.168.10.10/ 结果如下")]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("docker-compose down")]),t._v("可以停止并删除容器、网络。")]),t._v(" "),a("h4",{attrs:{id:"version-版本信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#version-版本信息"}},[t._v("#")]),t._v(" version 版本信息")]),t._v(" "),a("p",[t._v("描述"),a("code",[t._v("Compose")]),t._v("文件的版本信息，当前最新版本为"),a("code",[t._v("3.8")]),t._v("，对应的"),a("code",[t._v("Docker")]),t._v("版本为"),a("code",[t._v("19.03.0+")]),t._v("。关于每个版本的详细信息请参考："),a("code",[t._v("https://docs.docker.com/compose/compose-file/compose-versioning/")])]),t._v(" "),a("p",[t._v("以下为"),a("code",[t._v("Compose")]),t._v("文件的版本信息所对应的"),a("code",[t._v("Docker")]),t._v("版本。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Compose file format")]),t._v(" "),a("th",{staticStyle:{"text-align":"right"}},[t._v("Docker Engine release")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("3.8")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("19.03.0+")])]),t._v(" "),a("tr",[a("td",[t._v("3.7")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("18.06.0+")])]),t._v(" "),a("tr",[a("td",[t._v("3.6")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("18.02.0+")])]),t._v(" "),a("tr",[a("td",[t._v("3.5")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("17.12.0+")])]),t._v(" "),a("tr",[a("td",[t._v("3.4")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("17.09.0+")])]),t._v(" "),a("tr",[a("td",[t._v("3.3")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("17.06.0+")])]),t._v(" "),a("tr",[a("td",[t._v("3.2")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("17.04.0+")])]),t._v(" "),a("tr",[a("td",[t._v("3.1")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("1.13.1+")])]),t._v(" "),a("tr",[a("td",[t._v("3.0")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("1.13.0+")])]),t._v(" "),a("tr",[a("td",[t._v("...")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("1.x.x")])])])]),t._v(" "),a("h4",{attrs:{id:"services-定义服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#services-定义服务"}},[t._v("#")]),t._v(" services 定义服务")]),t._v(" "),a("p",[a("code",[t._v("services")]),t._v("用来定义服务，可以多个，每个服务中定义了创建容器时所需的镜像、参数、依赖等，就像将命令行参数传递给"),a("code",[t._v("docker run")]),t._v("一样。同样，网络和数据卷的定义也是一样的。")]),t._v(" "),a("p",[t._v("比如，通过"),a("code",[t._v("docker run")]),t._v("命令构建一个"),a("code",[t._v("MySQL")]),t._v("应用容器的命令如下：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -di --name mysql8 -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3306")]),t._v(":3306 -v /mydata/docker_mysql/conf:/etc/mysql/conf.d -v /mydata/docker_mysql/data:/var/lib/mysql -e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("MYSQL_ROOT_PASSWORD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234")]),t._v(" mysql:8\n")])])]),a("p",[t._v("使用"),a("code",[t._v("docker-compose.yml")]),t._v("以后则可以这样定义：")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3.8"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义服务，可以多个")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mysql")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 服务名称")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mysql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建容器时所需的镜像")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mysql8 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 容器名称，默认为"工程名称_服务条目名称_序号"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 宿主机与容器的端口映射关系")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3306:3306"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 左边宿主机端口:右边容器端口")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建容器时所需的环境变量")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("MYSQL_ROOT_PASSWORD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/mydata/docker_mysql/conf:/etc/mysql/conf.d"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/mydata/docker_mysql/data:/var/lib/mysql"')]),t._v("\n")])])]),a("h4",{attrs:{id:"image-镜像名称标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#image-镜像名称标签"}},[t._v("#")]),t._v(" image 镜像名称标签")]),t._v(" "),a("p",[t._v("指定创建容器时所需的镜像名称标签或者镜像"),a("code",[t._v("ID")]),t._v("。如果镜像在本地不存在，会去远程拉取。")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("web")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("world\n")])])]),a("h4",{attrs:{id:"build-构建容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build-构建容器"}},[t._v("#")]),t._v(" build 构建容器")]),t._v(" "),a("p",[t._v("除了可以基于指定的镜像构建容器，还可以基于"),a("code",[t._v("Dockerfile")]),t._v("文件构建，在使用"),a("code",[t._v("up")]),t._v("命令时会执行构建任务。")]),t._v(" "),a("h4",{attrs:{id:"context-文件路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#context-文件路径"}},[t._v("#")]),t._v(" context 文件路径")]),t._v(" "),a("p",[t._v("该选项可以是"),a("code",[t._v("Dockerfile")]),t._v("文件的绝对/相对路径，也可以是远程"),a("code",[t._v("Git")]),t._v("仓库的"),a("code",[t._v("URL")]),t._v("，当提供的值是相对路径时，相对当前"),a("code",[t._v("docker-compose.yml")]),t._v("文件所在目录。")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("context")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" . "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 相对当前 docker-compose.yml 文件所在目录，基于名称为 Dockerfile 的文件构建镜像")]),t._v("\n")])])]),a("h4",{attrs:{id:"dockerfile-构建镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-构建镜像"}},[t._v("#")]),t._v(" dockerfile 构建镜像")]),t._v(" "),a("p",[t._v("一般情况下，默认都基于文件名叫"),a("code",[t._v("Dockerfile")]),t._v("的文件构建镜像，当然也可以是自定义的文件名，使用"),a("code",[t._v("dockerfile")]),t._v("声明，不过这个选项只能声明文件名，文件所在路径还是要通过"),a("code",[t._v("centext")]),t._v("来声明。")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("context")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" . "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 相对当前 docker-compose.yml 文件所在目录")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("dockerfile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Dockerfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("alternate "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基于名称为 Dockerfile-alternate 的文件构建镜像")]),t._v("\n")])])]),a("h4",{attrs:{id:"container-name-容器名称"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#container-name-容器名称"}},[t._v("#")]),t._v(" container_name 容器名称")]),t._v(" "),a("p",[a("code",[t._v("Compose")]),t._v("创建的容器默认生成的名称格式为："),a("code",[t._v("工程名称_服务条目名称_序号")]),t._v("。如果要使用自定义名称，使用"),a("code",[t._v("container_name")]),t._v("声明。")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mycentos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" .\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mycentos7 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 容器名称，默认为"工程名称_服务条目名称_序号"')]),t._v("\n")])])]),a("p",[t._v("因为"),a("code",[t._v("Docker")]),t._v("容器名称必须是唯一的，所以如果指定了自定义名称，就不能将服务扩展至多个容器。这样做可能会导致错误。")]),t._v(" "),a("h4",{attrs:{id:"depends-on-容器依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#depends-on-容器依赖"}},[t._v("#")]),t._v(" depends_on 容器依赖")]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("Compose")]),t._v("最大的好处就是敲最少的命令做更多的事情，但一般项目容器启动的顺序是有要求的，如果直接从上到下启动容器，必然会因为容器依赖问题而启动失败。例如在没有启动数据库容器的情况下启动了"),a("code",[t._v("Web")]),t._v("应用容器，应用容器会因为找不到数据库而退出。"),a("code",[t._v("depends_on")]),t._v("就是用来解决容器依赖、启动先后问题的配置项。")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3.8"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("web")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" .\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("depends_on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" db\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" redis\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("db")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mysql\n")])])]),a("p",[t._v("上述"),a("code",[t._v("YAML")]),t._v("文件定义的容器会先启动"),a("code",[t._v("db")]),t._v("和"),a("code",[t._v("redis")]),t._v("两个服务，最后才启动"),a("code",[t._v("web")]),t._v("服务。")]),t._v(" "),a("h4",{attrs:{id:"ports-暴露端口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ports-暴露端口"}},[t._v("#")]),t._v(" ports 暴露端口")]),t._v(" "),a("p",[t._v("容器对外暴露的端口，格式：左边宿主机端口:右边容器端口。")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"80:80"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8080:8080"')]),t._v("\n")])])]),a("h4",{attrs:{id:"expose-接受端口范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expose-接受端口范围"}},[t._v("#")]),t._v(" expose 接受端口范围")]),t._v(" "),a("p",[t._v("容器暴露的端口不映射到宿主机，只允许能被连接的服务访问。")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("expose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"80"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8080"')]),t._v("\n")])])]),a("h4",{attrs:{id:"restart-重启策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restart-重启策略"}},[t._v("#")]),t._v(" restart 重启策略")]),t._v(" "),a("p",[t._v("容器重启策略，简单的理解就是"),a("code",[t._v("Docker")]),t._v("重启以后容器要不要一起启动")]),t._v(" "),a("ul",[a("li",[t._v("no：默认的重启策略，在任何情况下都不会重启容器；")]),t._v(" "),a("li",[t._v("on-failure：容器非正常退出时，比如退出状态为非0(异常退出)，才会重启容器；")]),t._v(" "),a("li",[t._v("always：容器总是重新启动，即使容器被手动停止了，当"),a("code",[t._v("Docker")]),t._v("重启时容器也还是会一起启动；")]),t._v(" "),a("li",[t._v("unless-stopped：容器总是重新启动，除非容器被停止（手动或其他方式），那么"),a("code",[t._v("Docker")]),t._v("重启时容器则不会启动。")])]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mynginx\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"80:80"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always\n")])])]),a("h4",{attrs:{id:"environment-环境变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#environment-环境变量"}},[t._v("#")]),t._v(" environment 环境变量")]),t._v(" "),a("p",[t._v("添加环境变量。可以使用数组也可以使用字典。布尔相关的值（true、false、yes、no）都需要用引号括起来，以确保 YML 解析器不会将它们转换为真或假。")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("RUOYI_ENV")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" development\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("SHOW")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'true'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("SESSION_SECRET")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n")])])]),a("p",[t._v("或者以下格式：")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" RUOYI_ENV=development\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" SHOW=true\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" SESSION_SECRET\n")])])]),a("h5",{attrs:{id:"env-file-文件获取环境变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#env-file-文件获取环境变量"}},[t._v("#")]),t._v(" env_file 文件获取环境变量")]),t._v(" "),a("p",[t._v("从文件中获取环境变量，可以指定一个或多个文件，其优先级低于"),a("code",[t._v("environment")]),t._v("指定的环境变量。")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("env_file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /opt/runtime_opts.env "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 绝对路径")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ./common.env "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 相对路径，相对当前 docker-compose.yml 文件所在目录")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ./apps/web.env "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 相对路径，相对当前 docker-compose.yml 文件所在目录")]),t._v("\n")])])]),a("p",[t._v("注意：env 文件中的每一行需采用"),a("code",[t._v("键=值")]),t._v("格式。以"),a("code",[t._v("#")]),t._v("开头的行会被视为注释并被忽略。空行也会被忽略。")]),t._v(" "),a("h4",{attrs:{id:"command-执行命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#command-执行命令"}},[t._v("#")]),t._v(" command 执行命令")]),t._v(" "),a("p",[t._v("覆盖容器启动后默认执行的命令。")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(' echo "helloworld"\n')])])]),a("p",[t._v("该命令也可以是一个列表。")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"helloworld"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h4",{attrs:{id:"volumes-目录挂载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volumes-目录挂载"}},[t._v("#")]),t._v(" volumes 目录挂载")]),t._v(" "),a("p",[t._v("数据卷，用于实现目录挂载，支持指定目录挂载、匿名挂载、具名挂载。")]),t._v(" "),a("ul",[a("li",[t._v("指定目录挂载的格式为：左边宿主机目录:右边容器目录，或者左边宿主机目录:右边容器目录:读写权限；")]),t._v(" "),a("li",[t._v("匿名挂载格式为：容器目录即可，或者容器目录即可:读写权限；")]),t._v(" "),a("li",[t._v("具名挂载格式为：数据卷条目名称:容器目录，或者数据卷条目名称:容器目录:读写权限。")])]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 描述 Compose 文件的版本信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3.8"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义服务，可以多个")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mysql")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 服务名称")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mysql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建容器时所需的镜像")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mysql8 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 容器名称，默认为"工程名称_服务条目名称_序号"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 宿主机与容器的端口映射关系")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3306:3306"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 左边宿主机端口:右边容器端口")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建容器时所需的环境变量")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("MYSQL_ROOT_PASSWORD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 绝对路径")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/mydata/docker_mysql/data:/var/lib/mysql"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 相对路径，相对当前 docker-compose.yml 文件所在目录")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" “./conf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/etc/mysql/conf.d“\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 匿名挂载，匿名挂载只需要写容器目录即可，容器外对应的目录会在 /var/lib/docker/volume 中生成")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/var/lib/mysql"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 具名挂载，就是给数据卷起了个名字，容器外对应的目录会在 /var/lib/docker/volume 中生成")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mysql-data-volume:/var/lib/mysql"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义数据卷，可以多个")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mysql-data-volume")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一个具体数据卷的条目名称")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mysql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("volume "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 数据卷名称，默认为"工程名称_数据卷条目名称"')]),t._v("\n")])])]),a("h4",{attrs:{id:"network-mode-网络模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#network-mode-网络模式"}},[t._v("#")]),t._v(" network_mode 网络模式")]),t._v(" "),a("p",[t._v("设置网络模式，类似 docker run 时添加的参数 --net host 或者 --network host 的用法")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("network_mode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bridge"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("network_mode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"host"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("network_mode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"none"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("network_mode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"service:[service name]"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("network_mode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"container:[container name/id]"')]),t._v("\n")])])]),a("h4",{attrs:{id:"networks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#networks"}},[t._v("#")]),t._v(" networks")]),t._v(" "),a("p",[t._v("配置容器连接的网络，引用顶级 networks 下的条目。")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义服务，可以多个")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 服务名称")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("networks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置容器连接的网络，引用顶级 networks 下的条目")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("net "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一个具体网络的条目名称")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 定义网络，可以多个。如果不声明，默认会创建一个网络名称为"工程名称_default"的 bridge 网络')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("networks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx-net")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一个具体网络的条目名称")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("net "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 网络名称，默认为"工程名称_网络条目名称"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("driver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bridge "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 网络模式，默认为 bridge")]),t._v("\n")])])]),a("h4",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases"}},[t._v("#")]),t._v(" aliases")]),t._v(" "),a("p",[t._v("网络上此服务的别名。同一网络上的其他容器可以使用服务名或此别名连接到服务容器。同一服务在不同的网络上可以具有不同的别名。")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义服务，可以多个")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 服务名称")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("networks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置容器连接的网络，引用顶级 networks 下的条目")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx-net")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一个具体网络的条目名称")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("aliases")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 服务别名，可以多个")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" nginx1 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 同一网络上的其他容器可以使用服务名或此别名连接到服务容器")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 定义网络，可以多个。如果不声明，默认会创建一个网络名称为"工程名称_default"的 bridge 网络')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("networks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx-net")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一个具体网络的条目名称")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("net "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 网络名称，默认为"工程名称_网络条目名称"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("driver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bridge "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 网络模式，默认为 bridge")]),t._v("\n")])])]),a("h3",{attrs:{id:"compose-常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compose-常用命令"}},[t._v("#")]),t._v(" Compose 常用命令")]),t._v(" "),a("p",[t._v("官方文档："),a("code",[t._v("https://docs.docker.com/compose/reference/overview/")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("COMMAND"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ARGS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("部分命令选项如下：")]),t._v(" "),a("ul",[a("li",[t._v("-f，--file：指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定，指定多个 yml；")]),t._v(" "),a("li",[t._v("-p, --project-name：指定工程名称，默认使用 docker-compose.yml 文件所在目录的名称；")]),t._v(" "),a("li",[t._v("-v：打印版本并退出；")]),t._v(" "),a("li",[t._v("--log-level：定义日志等级（DEBUG, INFO, WARNING, ERROR, CRITICAL）。")])]),t._v(" "),a("h4",{attrs:{id:"help"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#help"}},[t._v("#")]),t._v(" help")]),t._v(" "),a("p",[a("code",[t._v("docker-compose -help")]),t._v("查看帮助。")]),t._v(" "),a("h4",{attrs:{id:"config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#config"}},[t._v("#")]),t._v(" config")]),t._v(" "),a("p",[a("code",[t._v("docker-compose config -q")]),t._v("验证"),a("code",[t._v("docker-compose.yml")]),t._v("文件。当配置正确时，不输出任何内容，当配置错误时，输出错误信息。")]),t._v(" "),a("h4",{attrs:{id:"pull"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pull"}},[t._v("#")]),t._v(" pull")]),t._v(" "),a("p",[a("code",[t._v("docker-compose pull")]),t._v("拉取服务依赖的镜像。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取工程中所有服务依赖的镜像")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" pull\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取工程中 nginx 服务依赖的镜像")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" pull nginx\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取镜像过程中不打印拉取进度信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" pull -q\n")])])]),a("h4",{attrs:{id:"up"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#up"}},[t._v("#")]),t._v(" up")]),t._v(" "),a("p",[a("code",[t._v("docker-compose up")]),t._v("创建并启动所有服务的容器。指定多个"),a("code",[t._v("yml")]),t._v("加"),a("code",[t._v("-f")]),t._v("选项。以守护进程模式运行加"),a("code",[t._v("-d")]),t._v("选项。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 前台启动")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" up\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 后台启动")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" up -d\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -f 指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定，指定多个 yml")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" -f docker-compose.yml up -d \n")])])]),a("h4",{attrs:{id:"logs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logs"}},[t._v("#")]),t._v(" logs")]),t._v(" "),a("p",[a("code",[t._v("docker-compose logs")]),t._v("查看服务容器的输出日志。默认情况下，"),a("code",[t._v("docker-compose")]),t._v("将对不同的服务输出使用不同的颜色来区分。可以通过"),a("code",[t._v("--no-color")]),t._v("来关闭颜色。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出日志，不同的服务输出使用不同的颜色来区分")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" logs\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 跟踪日志输出")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" logs -f\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关闭颜色")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" logs --no-color\n")])])]),a("h4",{attrs:{id:"ps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ps"}},[t._v("#")]),t._v(" ps")]),t._v(" "),a("p",[a("code",[t._v("docker-compose ps")]),t._v("列出工程中所有服务的容器。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出工程中所有服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出工程中指定服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" nginx\n")])])]),a("h4",{attrs:{id:"run"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[t._v("#")]),t._v(" run")]),t._v(" "),a("p",[a("code",[t._v("docker-compose run")]),t._v("在指定服务容器上执行一个命令。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 在工程中指定服务的容器上执行 echo "helloworld"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" run nginx "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"helloworld"')]),t._v("\n")])])]),a("h4",{attrs:{id:"exec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exec"}},[t._v("#")]),t._v(" exec")]),t._v(" "),a("p",[a("code",[t._v("docker-compose exec")]),t._v("进入服务容器。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入工程中指定服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" nginx "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当一个服务拥有多个容器时，可通过 --index 参数进入到该服务下的任何容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" --index"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" nginx "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n")])])]),a("h4",{attrs:{id:"pause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pause"}},[t._v("#")]),t._v(" pause")]),t._v(" "),a("p",[a("code",[t._v("docker-compose pause")]),t._v("暂停服务容器")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 暂停工程中所有服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" pause\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 暂停工程中指定服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" pause nginx\n")])])]),a("h4",{attrs:{id:"unpause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unpause"}},[t._v("#")]),t._v(" unpause")]),t._v(" "),a("p",[a("code",[t._v("docker-compose unpause")]),t._v("恢复服务容器。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 恢复工程中所有服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" unpause\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 恢复工程中指定服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" unpause nginx\n")])])]),a("h4",{attrs:{id:"restart"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restart"}},[t._v("#")]),t._v(" restart")]),t._v(" "),a("p",[a("code",[t._v("docker-compose restart")]),t._v("重启服务容器。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启工程中所有服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" restart\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启工程中指定服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" restart nginx\n")])])]),a("h4",{attrs:{id:"start"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start"}},[t._v("#")]),t._v(" start")]),t._v(" "),a("p",[a("code",[t._v("docker-compose start")]),t._v("启动服务容器。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动工程中所有服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" start\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动工程中指定服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" start nginx\n")])])]),a("h4",{attrs:{id:"stop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stop"}},[t._v("#")]),t._v(" stop")]),t._v(" "),a("p",[a("code",[t._v("docker-compose stop")]),t._v("停止服务容器。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止工程中所有服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" stop\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止工程中指定服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" stop nginx\n")])])]),a("h4",{attrs:{id:"kill"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kill"}},[t._v("#")]),t._v(" kill")]),t._v(" "),a("p",[a("code",[t._v("docker-compose kill")]),t._v("通过发送"),a("code",[t._v("SIGKILL")]),t._v("信号停止指定服务的容器。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过发送 SIGKILL 信号停止工程中指定服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),t._v(" nginx\n")])])]),a("h4",{attrs:{id:"rm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rm"}},[t._v("#")]),t._v(" rm")]),t._v(" "),a("p",[t._v("docker-compose rm 删除服务（停止状态）容器。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除所有（停止状态）服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 先停止所有服务的容器，再删除所有服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -s\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不询问是否删除，直接删除")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -f\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除服务容器挂载的数据卷")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -v\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除工程中指定服务的容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -sv nginx\n")])])]),a("h4",{attrs:{id:"down"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#down"}},[t._v("#")]),t._v(" down")]),t._v(" "),a("p",[t._v("停止并删除所有服务的容器、网络、镜像、数据卷。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止并删除工程中所有服务的容器、网络")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" stop\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止并删除工程中所有服务的容器、网络、镜像")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" down --rmi all\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止并删除工程中所有服务的容器、网络、数据卷")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" down -v\n")])])]),a("h4",{attrs:{id:"images"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#images"}},[t._v("#")]),t._v(" images")]),t._v(" "),a("p",[a("code",[t._v("docker-compose images")]),t._v("打印服务容器所对应的镜像。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打印所有服务的容器所对应的镜像")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" images\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打印指定服务的容器所对应的镜像")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" images nginx\n")])])]),a("h4",{attrs:{id:"port"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#port"}},[t._v("#")]),t._v(" port")]),t._v(" "),a("p",[a("code",[t._v("docker-compose port")]),t._v("打印指定服务容器的某个端口所映射的宿主机端口。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" port nginx "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n")])])]),a("h4",{attrs:{id:"top"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#top"}},[t._v("#")]),t._v(" top")]),t._v(" "),a("p",[a("code",[t._v("docker-compose top")]),t._v("显示正在运行的进程。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示工程中所有服务的容器正在运行的进程")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示工程中指定服务的容器正在运行的进程")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v(" nginx\n")])])]),a("h2",{attrs:{id:"项目部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目部署"}},[t._v("#")]),t._v(" 项目部署")]),t._v(" "),a("p",[t._v("项目提供了"),a("code",[t._v("docker")]),t._v("部署，只需要复制"),a("code",[t._v("jar文件")]),t._v("到对应的"),a("code",[t._v("/docker/ruoyi")]),t._v("目录下。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("docker\n├── mysql            // 数据库\n│       └── db                            // 数据库脚本\n│       └── dockerfile                    // mysql dockerfile\n├── nacos            // 注册中心/配置中心\n│       └── conf                          // nacos 配置文件\n│       └── dockerfile                    // nacos dockerfile\n├── nginx            // web服务器\n│       └── conf                          // nginx 配置文件\n│       └── html                          // 打包后的前端ui\n│       └── dockerfile                    // nginx dockerfile\n├── redis            // 缓存服务\n│       └── conf                          // redis 配置文件\n│       └── dockerfile                    // redis dockerfile\n├── ruoyi            // 缓存服务\n│       └── auth                          // 认证中心 dockerfile jar\n│       └── gateway                       // 网关模块 dockerfile jar\n│       └── modules                       // 业务模块 dockerfile jar\n│       └── visual                        // 图形化管理模块 dockerfile jar\n├── deploy.sh               // 部署脚本\n├── docker-compose.yml      // docker-compose\n")])])]),a("p",[t._v("上传文件到自己的服务器，通过"),a("code",[t._v("deploy.sh")]),t._v("执行命令控制。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启所需端口")]),t._v("\n./deploy.sh port\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动基础环境（必须）")]),t._v("\n./deploy.sh base\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动程序模块（必须）")]),t._v("\n./deploy.sh modules\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关闭所有环境/模块")]),t._v("\n./deploy.sh stop\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除所有环境/模块")]),t._v("\n./deploy.sh "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);